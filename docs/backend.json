{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the MongoMarket application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "contactNumber": {
          "type": "string",
          "description": "Contact number of the user."
        },
        "address": {
          "type": "string",
          "description": "Address of the user."
        },
        "paymentMethods": {
          "type": "array",
          "description": "Payment methods associated with the user.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "email"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product listed on the MongoMarket.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "supplierId": {
          "type": "string",
          "description": "Reference to Supplier. (Relationship: Supplier 1:N Product)"
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "description": {
          "type": "string",
          "description": "Description of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product image.",
          "format": "uri"
        },
        "price": {
          "type": "number",
          "description": "Price of the product."
        },
        "category": {
          "type": "string",
          "description": "Category of the product."
        }
      },
      "required": [
        "id",
        "supplierId",
        "name",
        "description",
        "price",
        "category"
      ]
    },
    "Supplier": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Supplier",
      "type": "object",
      "description": "Represents a supplier on the MongoMarket platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the supplier."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:1 Supplier)"
        },
        "companyName": {
          "type": "string",
          "description": "Name of the supplier's company."
        },
        "contactName": {
          "type": "string",
          "description": "Contact name of the supplier."
        },
        "contactEmail": {
          "type": "string",
          "description": "Contact email of the supplier.",
          "format": "email"
        },
        "contactPhone": {
          "type": "string",
          "description": "Contact phone number of the supplier."
        }
      },
      "required": [
        "id",
        "userId",
        "companyName"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed on the MongoMarket platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Order)"
        },
        "orderDate": {
          "type": "string",
          "description": "Date when the order was placed.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "Total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "Status of the order (e.g., pending, processing, shipped, delivered)."
        },
        "orderItems": {
          "type": "array",
          "description": "List of order items.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "orderDate",
        "totalAmount",
        "status"
      ]
    },
    "OrderItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OrderItem",
      "type": "object",
      "description": "Represents an item within an order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order item."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:N OrderItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N OrderItem)"
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the product in the order item."
        },
        "price": {
          "type": "number",
          "description": "Price of the product at the time of the order."
        }
      },
      "required": [
        "id",
        "orderId",
        "productId",
        "quantity",
        "price"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/userProfiles/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. The `userId` parameter matches the Firebase Authentication UID, establishing ownership. Includes the id of the user's document.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching the Firebase Authentication UID."
            }
          ]
        }
      },
      {
        "path": "/userProfiles/{userId}/suppliers/{supplierId}",
        "definition": {
          "entityName": "Supplier",
          "schema": {
            "$ref": "#/backend/entities/Supplier"
          },
          "description": "Stores supplier information related to a user. Nested under the `/userProfiles/{userId}` collection to establish ownership. The `userId` field in the `Supplier` document must match the `userId` in the path.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching the Firebase Authentication UID."
            },
            {
              "name": "supplierId",
              "description": "The unique identifier for the supplier."
            }
          ]
        }
      },
      {
        "path": "/suppliers/{supplierId}/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information for a supplier.  Nested under the `/suppliers/{supplierId}` collection to establish ownership.  Includes denormalized `supplierId` to enforce supplier/product relationship. The `supplierId` field in the `Product` document must match the `supplierId` in the path.",
          "params": [
            {
              "name": "supplierId",
              "description": "The unique identifier for the supplier."
            },
            {
              "name": "productId",
              "description": "The unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/userProfiles/{userId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores order information for a user.  Nested under the `/userProfiles/{userId}` collection to establish ownership.  The `userId` field in the `Order` document must match the `userId` in the path.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching the Firebase Authentication UID."
            },
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            }
          ]
        }
      },
      {
        "path": "/userProfiles/{userId}/orders/{orderId}/orderItems/{orderItemId}",
        "definition": {
          "entityName": "OrderItem",
          "schema": {
            "$ref": "#/backend/entities/OrderItem"
          },
          "description": "Stores order item information for an order. Nested under the `/userProfiles/{userId}/orders/{orderId}` collection to establish ownership. The `orderId` field in the `OrderItem` document must match the `orderId` in the path.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching the Firebase Authentication UID."
            },
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            },
            {
              "name": "orderItemId",
              "description": "The unique identifier for the order item."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and ease of debugging, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC, and QAPs. \n\n**Authorization Independence:**\nAuthorization independence is achieved through denormalization. For instance, the `suppliers/{supplierId}/products/{productId}` collection requires the `supplierId` to be a property in the `Product` documents themselves, in order to avoid `get()` calls in the security rules.\n\n**Structural Segregation:**\nThe structure separates user profiles and supplier data into distinct collections (`/userProfiles` and `/suppliers`) to maintain a homogeneous security posture within each collection. User-owned data is further segregated under `/users/{userId}` for private resources.\n\n**Access Modeling:**\n*   Private Data: User profiles are stored under the `/userProfiles/{userId}` path, providing path-based ownership. This allows straightforward security rules to restrict access to the profile owner.\n*   Hierarchical Paths for User-Owned Data: Supplier entities are nested under the user's document (`/userProfiles/{userId}/suppliers/{supplierId}`), establishing a clear ownership hierarchy. Products belonging to a supplier are nested under the supplier document (`/suppliers/{supplierId}/products/{productId}`).\n*   Collaborative Data: Not explicitly present in the MVP, but if collaborative features were added (e.g., shared product lists), a membership map (`members: {uid1: \"role\", uid2: \"role\"}`) would be used within the relevant document to manage access.\n*   Global Roles (DBAC): The application does not include global roles in the MVP.\n\n**QAPs (Rules are not Filters):**\nThe structure enables secure `list` operations by avoiding the need for filtering based on user roles within the rules. For example, listing products under a supplier is secure because the path `/suppliers/{supplierId}/products/{productId}` guarantees that only products belonging to that supplier are accessed.\n\n**Invariants:**\nThe structure supports the integrity of ownership through explicit parent-child relationships and path-based ownership. Timestamps (if implemented) can be enforced through rules. Denormalized data, such as copying a supplier's ID into their products, ensures data consistency without complex lookups.\n\nThe structure adheres to the principles outlined, promoting a secure, scalable, and debuggable Firebase application."
  }
}