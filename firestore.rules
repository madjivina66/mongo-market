/**
 * @file Firestore Security Rules for MongoMarket
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles, suppliers and order data. Product data is publicly readable.
 * @data_structure
 *   - /userProfiles/{userId}: Stores user profile information, accessible only by the user.
 *   - /suppliers/{supplierId}: Stores supplier profiles, accessible only by the supplier.
 *   - /products/{productId}: Stores product information, publicly readable.
 *   - /userProfiles/{userId}/orders/{orderId}: Stores order information, accessible only by the user who owns the order.
 *   - /userProfiles/{userId}/orders/{orderId}/orderItems/{orderItemId}: Stores order items, accessible only by the user who owns the order.
 *   - /liveSessions/{sessionId}/messages/{messageId}: Stores chat messages for live sessions, publicly readable, writeable by authenticated users.
 * @key_security_decisions
 *   - User listing is disallowed for privacy.
 *   - Read-only access is granted to the /products collection.
 *   - Write access to live session messages is only allowed for authenticated users.
 * @denormalization There are no examples of denormalization in this data model
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user id matches the authenticated user's id.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requested user id matches the authenticated user's id and resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /userProfiles/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' can read their own profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @deny (update) User with ID 'user456' cannot update the profile for 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes, restricts read access to the owner.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for supplier profile documents.
     * @path /suppliers/{supplierId}
     * @allow (create) Supplier with ID 'supplier123' can create their own profile.
     *   - request.auth.uid: 'supplier123'
     *   - request.resource.data.id: 'supplier123'
     * @allow (get) Supplier with ID 'supplier123' can read their own profile.
     *   - request.auth.uid: 'supplier123'
     * @deny (create) Supplier with ID 'supplier456' cannot create a profile for 'supplier123'.
     *   - request.auth.uid: 'supplier456'
     *   - request.resource.data.id: 'supplier123'
     * @deny (update) Supplier with ID 'supplier456' cannot update the profile for 'supplier123'.
     *   - request.auth.uid: 'supplier456'
     * @principle Enforces document ownership for writes, restricts read access to the owner.
     */
    match /suppliers/{supplierId} {
      allow get: if isOwner(supplierId);
      allow list: if false;
      allow create: if isOwner(supplierId) && request.resource.data.id == supplierId;
      allow update: if isExistingOwner(supplierId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(supplierId);
    }

    /**
     * @description Rules for product documents.
     * @path /products/{productId}
     * @allow (get) Any user can read product information.
     *   - request.auth.uid: null (anonymous access)
     * @allow (list) Any user can list products.
     *   - request.auth.uid: null (anonymous access)
     * @deny (create) Unauthorized user cannot create products.
     *   - request.auth.uid: 'user123'
     * @deny (update) Unauthorized user cannot update products.
     *   - request.auth.uid: 'user123'
     * @principle Allows public read access, restricts writes to authorized users/roles (Not Implemented).
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for order documents.
     * @path /userProfiles/{userId}/orders/{orderId}
     * @allow (create) User with ID 'user123' can create an order for themselves.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get) User with ID 'user123' can read their own order.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create an order for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.userId: 'user123'
     * @deny (update) User with ID 'user456' cannot update the order for 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes, restricts read access to the owner.
     */
    match /userProfiles/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for order item documents.
     * @path /userProfiles/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) User with ID 'user123' can create an order item for their own order.
     *   - request.auth.uid: 'user123'
     * @allow (get) User with ID 'user123' can read their own order item.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create an order item for 'user123'.
     *   - request.auth.uid: 'user456'
     * @deny (update) User with ID 'user456' cannot update the order item for 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes, restricts read access to the owner.
     */
    match /userProfiles/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for chat message documents.
     * @path /liveSessions/{sessionId}/messages/{messageId}
     * @allow (get) Any user can read chat messages.
     *   - request.auth.uid: null (anonymous access)
     * @allow (list) Any user can list chat messages.
     *   - request.auth.uid: null (anonymous access)
     * @allow (create) Authenticated user can create chat messages.
     *   - request.auth.uid: 'user123'
     * @deny (update) Unauthorized user cannot update chat messages.
     *   - request.auth.uid: null (anonymous access)
     * @principle Allows public read access, restricts writes to authenticated users.
     */
    match /liveSessions/{sessionId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}