rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to supplier profiles based on supplier ID.
     * @path /suppliers/{supplierId}
     * @allow (get, list): Allows any signed-in user to read supplier profiles.
     * @allow (create, update, delete): Only the supplier with matching ID can modify their profile.
     * @deny (create): Denies creation if the supplier ID in the request does not match the path.
     * @deny (update): Denies update if the supplier does not exist.
     * @principle Enforces document ownership for writes and self-creation for supplier profiles.
     */
    match /suppliers/{supplierId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(supplierId) {
        return request.auth.uid == supplierId;
      }

      function isExistingOwner(supplierId) {
        return isOwner(supplierId) && exists(resource);
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(supplierId);
      allow update: if isSignedIn() && isExistingOwner(supplierId);
      allow delete: if isSignedIn() && isExistingOwner(supplierId);
    }

    /**
     * @description Grants access to products listed by a supplier, based on the supplier ID.
     * @path /suppliers/{supplierId}/products/{productId}
     * @allow (get, list): Allows any signed-in user to read products.
     * @allow (create, update, delete): Only the supplier with the matching supplierId can modify their products.
     * @deny (create): Denies creation if the supplier ID in the request does not match the path.
     * @deny (update): Denies update if the supplier does not exist.
     * @principle Enforces document ownership for writes and self-creation for supplier profiles.
     */
    match /suppliers/{supplierId}/products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSupplierOwner(supplierId) {
        return request.auth.uid == supplierId;
      }

      function isExistingSupplierOwner(supplierId) {
        return isSupplierOwner(supplierId) && exists(resource);
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isSupplierOwner(supplierId);
      allow update: if isSignedIn() && isExistingSupplierOwner(supplierId);
      allow delete: if isSignedIn() && isExistingSupplierOwner(supplierId);
    }

    /**
     * @description Grants access to user profiles based on user ID.
     * @path /users/{userId}
     * @allow (get, list): Allows the user with matching ID to read their own profile. Listing all users is denied.
     * @allow (create, update, delete): Only the user with matching ID can create, update, or delete their profile.
     * @deny (create): Denies creation if the user ID in the request does not match the path.
     * @deny (update): Denies update if the user does not exist.
     * @principle Enforces document ownership for writes and self-creation for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Prevent listing all user documents.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to orders placed by a user, based on the user ID.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list): Allows the user with matching ID to read their own orders.
     * @allow (create, update, delete): Only the user with matching ID can create, update, or delete their orders.
     * @deny (create): Denies creation if the user ID in the request does not match the path.
     * @deny (update): Denies update if the order does not exist.
     * @principle Enforces document ownership for writes and self-creation for user orders.
     */
    match /users/{userId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to order items within an order, based on the user and order IDs.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list): Allows the user with matching ID to read their own order items.
     * @allow (create, update, delete): Only the user with matching ID can create, update, or delete their order items.
     * @deny (create): Denies creation if the user ID in the request does not match the path.
     * @deny (update): Denies update if the order item does not exist.
     * @principle Enforces document ownership for writes and self-creation for user order items.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}