/**
 * @file Firestore Security Rules for MongoMarket.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-related data (profiles, orders, order items) and a public-read, owner-write model for products. Supplier data is restricted to the supplier themselves.  It uses path-based authorization to avoid costly `get()` calls and ensure efficient list operations.
 * @data_structure
 *   - `/users/{userId}`: Stores user profiles, accessible only to the user.
 *   - `/suppliers/{supplierId}`: Stores supplier profiles, accessible only to the supplier.
 *   - `/products/{productId}`: Stores product information, publicly readable but writable only with valid ownership.
 *   - `/users/{userId}/orders/{orderId}`: Stores order information, accessible only to the user.
 *   - `/users/{userId}/orders/{orderId}/orderItems/{orderItemId}`: Stores order items, accessible only to the user.
 * @key_security_decisions
 *   - Users can only access their own profile data and orders.
 *   - Suppliers can only access their own profile data.
 *   - Products are publicly readable but can only be created, updated, or deleted with valid ownership.
 *   - Listing all users or suppliers is disallowed for security reasons.
 * @denormalization_for_authorization Not applicable as ownership is determined by path structure.
 * @structural_segregation Not applicable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the user can read and write their own data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their own profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' attempts to create a profile for another user.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user456'
     * @deny (get, update, delete) User with ID 'user123' attempts to read/update/delete the profile of another user.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == userId && resource != null;
      allow delete: if isOwner(userId) && resource.data.id == userId && resource != null;
    }

    /**
     * @description Protects supplier profiles, ensuring only the supplier can read and write their own data.
     * @path /suppliers/{supplierId}
     * @allow (create) Supplier with ID 'supplier123' creates their own profile.
     *   - request.auth.uid: 'supplier123'
     *   - request.resource.data.id: 'supplier123'
     * @allow (get, update, delete) Supplier with ID 'supplier123' reads/updates/deletes their own profile.
     *   - request.auth.uid: 'supplier123'
     * @deny (create) Supplier with ID 'supplier123' attempts to create a profile for another supplier.
     *   - request.auth.uid: 'supplier123'
     *   - request.resource.data.id: 'supplier456'
     * @deny (get, update, delete) Supplier with ID 'supplier123' attempts to read/update/delete the profile of another supplier.
     *   - request.auth.uid: 'supplier123'
     * @principle Enforces document ownership for writes and restricts access to a supplier's own data tree.
     */
    match /suppliers/{supplierId} {
        function isOwner(supplierId) {
            return request.auth.uid == supplierId;
        }
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isOwner(supplierId);
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
        allow update: if isOwner(supplierId) && resource.data.id == supplierId && resource != null;
        allow delete: if isOwner(supplierId) && resource.data.id == supplierId && resource != null;
    }

    /**
     * @description Manages product access, allowing public reads but restricting writes to authorized users.
     * @path /products/{productId}
     * @allow (get, list) Any user (or no user) can read/list product information.
     *   - request.auth.uid: null (or any user ID)
     * @allow (create) User with ID 'user123' creates a product with their ID as the 'supplierId'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.supplierId: 'user123'
     * @allow (update, delete) User with ID 'user123' updates/deletes a product where 'supplierId' matches their ID.
     *   - request.auth.uid: 'user123'
     *   - resource.data.supplierId: 'user123'
     * @deny (create) User with ID 'user123' creates a product with a mismatched 'supplierId'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.supplierId: 'user456'
     * @deny (update, delete) User with ID 'user123' attempts to update/delete a product where 'supplierId' doesn't match their ID.
     *   - request.auth.uid: 'user123'
     *   - resource.data.supplierId: 'user456'
     * @principle Allows public read access while enforcing document ownership for writes.  The 'supplierId' field is used as the owner field.
     */
    match /products/{productId} {
        function isOwner(supplierId) {
            return request.auth.uid == supplierId;
        }
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.supplierId == request.auth.uid;
        allow update: if isOwner(resource.data.supplierId) && resource != null;
        allow delete: if isOwner(resource.data.supplierId) && resource != null;
    }

    /**
     * @description Protects orders, ensuring only the user can read and write their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with ID 'user123' creates an order under their profile.
     *   - request.auth.uid: 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their own order.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' attempts to create an order under another user's profile.
     *   - request.auth.uid: 'user456'
     * @deny (get, update, delete) User with ID 'user123' attempts to read/update/delete an order of another user.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes and restricts access to a user's own order data.
     */
    match /users/{userId}/orders/{orderId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isSignedIn();
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Protects order items, ensuring only the user can read and write their own order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) User with ID 'user123' creates an order item under their order.
     *   - request.auth.uid: 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their own order item.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' attempts to create an order item under another user's order.
     *   - request.auth.uid: 'user456'
     * @deny (get, update, delete) User with ID 'user123' attempts to read/update/delete an order item of another user.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes and restricts access to a user's own order item data.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isSignedIn();
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }
  }
}