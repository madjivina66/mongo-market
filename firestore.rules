/**
 * @fileoverview Firestore Security Rules for MongoMarket.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, orders, and order items. Suppliers also own their product listings.
 *
 * Data Structure:
 * - /suppliers/{supplierId}: Supplier profiles, uniquely identified by supplierId.
 * - /suppliers/{supplierId}/products/{productId}: Products listed by a specific supplier.
 * - /users/{userId}: User profiles, uniquely identified by userId.
 * - /users/{userId}/orders/{orderId}: Orders placed by a specific user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Items within a specific order.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data, orders, and order items.
 * - Suppliers can only access and modify their own product listings.
 * - Read access follows the same ownership constraints as write access.
 * - Data validation is relaxed to facilitate rapid prototyping. Focus is on access control.
 *
 * Denormalization for Authorization:
 *  - The SupplierId is part of the product document schema to ensure Supplier ownership.
 *  - The UserId is part of the order document schema to ensure User ownership.
 *
 * Structural Segregation:
 *  - Private user and supplier data is stored under user-specific and supplier-specific paths respectively (e.g., `/users/{userId}`, `/suppliers/{supplierId}`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages supplier profiles. Only allows a supplier to manage their own profile.
     * @path /suppliers/{supplierId}
     * @allow (create) - Authenticated user with matching supplierId can create a supplier profile.
     * @allow (get, list, update, delete) - Authenticated user with matching supplierId can access and modify their supplier profile.
     * @deny (create) - Authenticated user with non-matching supplierId cannot create a supplier profile.
     * @deny (get, list, update, delete) - Authenticated user with non-matching supplierId cannot access or modify another supplier's profile.
     * @principle Enforces document ownership for writes.
     */
    match /suppliers/{supplierId} {
      allow get, list: if false;
      allow create: if isSignedIn() && isOwner(supplierId);
      allow update: if isSignedIn() && isExistingOwner(supplierId);
      allow delete: if isSignedIn() && isExistingOwner(supplierId);
    }

    /**
     * @description Manages products listed by a supplier. Only allows a supplier to manage their own product listings.
     * @path /suppliers/{supplierId}/products/{productId}
     * @allow (create) - Authenticated user with matching supplierId can create a product under their profile.
     * @allow (get, list, update, delete) - Authenticated user with matching supplierId can access and modify their products.
     * @deny (create) - Authenticated user with non-matching supplierId cannot create a product under another supplier's profile.
     * @deny (get, list, update, delete) - Authenticated user with non-matching supplierId cannot access or modify another supplier's products.
     * @principle Enforces document ownership for writes.
     */
    match /suppliers/{supplierId}/products/{productId} {
      allow get, list: if isSignedIn() && isOwner(supplierId);
      allow create: if isSignedIn() && isOwner(supplierId);
      allow update: if isSignedIn() && isExistingOwner(supplierId);
      allow delete: if isSignedIn() && isExistingOwner(supplierId);
    }

    /**
     * @description Manages user profiles. Only allows a user to manage their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId can create their user profile.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access and modify their user profile.
     * @deny (create) - Authenticated user with non-matching userId cannot create a user profile.
     * @deny (get, list, update, delete) - Authenticated user with non-matching userId cannot access or modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages orders placed by a user. Only allows a user to manage their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) - Authenticated user with matching userId can create an order under their profile.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access and modify their own orders.
     * @deny (create) - Authenticated user with non-matching userId cannot create an order under another user's profile.
     * @deny (get, list, update, delete) - Authenticated user with non-matching userId cannot access or modify another user's orders.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages order items within an order. Only allows a user to manage their own order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) - Authenticated user with matching userId can create an order item under their order.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access and modify their order items.
     * @deny (create) - Authenticated user with non-matching userId cannot create an order item under another user's order.
     * @deny (get, list, update, delete) - Authenticated user with non-matching userId cannot access or modify order items in another user's order.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    //----------------------------------------------------------------------------------------------
    // Helper functions
    //----------------------------------------------------------------------------------------------

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the authenticated user's ID matches the provided userId, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId and the resource exists.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the authenticated user's ID matches the provided userId and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}