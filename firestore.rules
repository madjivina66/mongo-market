/**
 * @file Firestore Security Rules for MongoMarket
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and orders,
 * while products are publicly readable but only modifiable by authorized users/roles.
 * Suppliers are similar to users; they own their data.
 * @data_structure
 * - /users/{userId}: Stores user profiles.
 * - /suppliers/{supplierId}: Stores supplier profiles.
 * - /products/{productId}: Stores product information.
 * - /users/{userId}/orders/{orderId}: Stores order information for each user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Stores individual order items for each order.
 * @key_security_decisions
 * - User listing is disallowed.
 * - Public read access for products.
 * - Strict ownership for user profiles, supplier profiles, orders, and order items.
 * - No `get()` calls are used in rules for authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects all documents from being read or written without authentication.
     * @path /databases/{database}/documents
     * @allow (get, list, create, update, delete) Signed-in user can access all.
     * @deny (get, list, create, update, delete) No access for non-authenticated users.
     * @principle Requires all requests to be authenticated.
     */
    match /{document=**} {
      function isSignedIn() {
        return request.auth != null;
      }
           allow read, write: if isSignedIn();
    }

    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (get) User can read their own profile.
     * @allow (create) User can create their own profile.
     * @allow (update) User can update their own profile.
     * @allow (delete) User can delete their own profile.
     * @deny (get) User cannot read other user profiles.
     * @deny (create) User cannot create other user profiles.
     * @deny (update) User cannot update other user profiles.
     * @deny (delete) User cannot delete other user profiles.
     * @principle Enforces user-ownership.
     */
    match /userProfiles/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

        /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (get) User can read their own profile.
     * @allow (create) User can create their own profile.
     * @allow (update) User can update their own profile.
     * @allow (delete) User can delete their own profile.
     * @deny (get) User cannot read other user profiles.
     * @deny (create) User cannot create other user profiles.
     * @deny (update) User cannot update other user profiles.
     * @deny (delete) User cannot delete other user profiles.
     * @principle Enforces user-ownership.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for supplier profiles.
     * @path /suppliers/{supplierId}
     * @allow (get) Supplier can read their own profile.
     * @allow (create) Supplier can create their own profile.
     * @allow (update) Supplier can update their own profile.
     * @allow (delete) Supplier can delete their own profile.
     * @deny (get) Supplier cannot read other supplier profiles.
     * @deny (create) Supplier cannot create other supplier profiles.
     * @deny (update) Supplier cannot update other supplier profiles.
     * @deny (delete) Supplier cannot delete other supplier profiles.
     * @principle Enforces supplier-ownership.
     */
    match /suppliers/{supplierId} {
      function isOwner(supplierId) {
        return request.auth.uid == supplierId;
      }
      allow get: if isOwner(supplierId);
      allow list: if false;
      allow create: if isOwner(supplierId);
      allow update: if isOwner(supplierId);
      allow delete: if isOwner(supplierId);
    }

    /**
     * @description Defines access rules for products.
     * @path /products/{productId}
     * @allow (get) Products are publicly readable.
     * @allow (list) Products are publicly listable.
     * @deny (create) Only authorized users or roles can create products. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) Only authorized users or roles can update products. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) Only authorized users or roles can delete products. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read access with restricted writes.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Defines access rules for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get) User can read their own orders.
     * @allow (list) User can list their own orders.
     * @allow (create) User can create their own orders.
     * @allow (update) User can update their own orders.
     * @allow (delete) User can delete their own orders.
     * @deny (get) User cannot read other user orders.
     * @deny (create) User cannot create other user orders.
     * @deny (update) User cannot update other user orders.
     * @deny (delete) User cannot delete other user orders.
     * @principle Enforces user-ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get) User can read their own order items.
     * @allow (list) User can list their own order items.
     * @allow (create) User can create their own order items.
     * @allow (update) User can update their own order items.
     * @allow (delete) User can delete their own order items.
     * @deny (get) User cannot read other user order items.
     * @deny (create) User cannot create other user order items.
     * @deny (update) User cannot update other user order items.
     * @deny (delete) User cannot delete other user order items.
     * @principle Enforces user-ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}