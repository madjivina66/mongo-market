/**
 * @file Firestore Security Rules for MongoMarket.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model, where users can only access and modify their own data.
 * Suppliers can manage their own products.
 * @data_structure
 * - User profiles are stored under `/userProfiles/{userId}`.
 * - Suppliers are stored under `/userProfiles/{userId}/suppliers/{supplierId}`.
 * - Products are stored under `/suppliers/{supplierId}/products/{productId}`.
 * - Orders are stored under `/userProfiles/{userId}/orders/{orderId}`.
 * - OrderItems are stored under `/userProfiles/{userId}/orders/{orderId}/orderItems/{orderItemId}`.
 * @key_security_decisions
 * - Listing user profiles is disallowed to prevent unauthorized access to user data.
 * - All write operations are protected by authorization checks to ensure data integrity and ownership.
 * - Data consistency between paths and document data is enforced on create and update operations.
 * - No global roles are defined in the current ruleset.
 * @denormalization_for_authorization
 * - The `supplierId` is denormalized into the `Product` document to allow rules to enforce the supplier/product relationship without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile documents only to the owner.
     * @path /userProfiles/{userId}
     * @allow (get) User 'QsgOPcJ9O2gI8OiJglzte8dbouh2' can read their own profile: `request.auth.uid == 'QsgOPcJ9O2gI8OiJglzte8dbouh2'`
     * @deny (get) User 'anotherUser' cannot read user 'QsgOPcJ9O2gI8OiJglzte8dbouh2' profile: `request.auth.uid != 'QsgOPcJ9O2gI8OiJglzte8dbouh2'`
     * @allow (create) User 'QsgOPcJ9O2gI8OiJglzte8dbouh2' can create their profile if the document ID matches their UID: `request.auth.uid == userId && request.resource.data.id == userId`
     * @allow (update) User 'QsgOPcJ9O2gI8OiJglzte8dbouh2' can update their profile if the document exists and the profile ID is immutable.
     * @deny (update) User 'QsgOPcJ9O2gI8OiJglzte8dbouh2' can't update a non existing profile
     * @allow (delete) User 'QsgOPcJ9O2gI8OiJglzte8dbouh2' can delete their profile if it exists: `isExistingOwner(userId)`
     * @principle Enforces document ownership and relational integrity for user profiles.
     */
    match /userProfiles/{userId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Read rules
      allow get: if isOwner(userId);
      allow list: if false;

      // Write rules
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to supplier documents only to the owner.
     * @path /userProfiles/{userId}/suppliers/{supplierId}
     * @allow (get) User 'QsgOPcJ9O2gI8OiJglzte8dbouh2' can read their own supplier: `request.auth.uid == 'QsgOPcJ9O2gI8OiJglzte8dbouh2'`
     * @deny (get) User 'anotherUser' cannot read user 'QsgOPcJ9O2gI8OiJglzte8dbouh2' supplier: `request.auth.uid != 'QsgOPcJ9O2gI8OiJglzte8dbouh2'`
     * @allow (create) User 'QsgOPcJ9O2gI8OiJglzte8dbouh2' can create a supplier under their profile.
     * @allow (update) User 'QsgOPcJ9O2gI8OiJglzte8dbouh2' can update their supplier if it exists.
     * @deny (update) User 'QsgOPcJ9O2gI8OiJglzte8dbouh2' can't update a non existing supplier
     * @allow (delete) User 'QsgOPcJ9O2gI8OiJglzte8dbouh2' can delete their supplier if it exists: `isExistingOwner(userId)`
     * @principle Enforces document ownership and relational integrity for suppliers.
     */
    match /userProfiles/{userId}/suppliers/{supplierId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Read rules
      allow get: if isOwner(userId);
      allow list: if false;

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to product documents only to the supplier.
     * @path /suppliers/{supplierId}/products/{productId}
     * @allow (get) Any user can read a product: `if true`
     * @allow (list) Any user can list products: `if true`
     * @allow (create) Supplier can create products.
     * @allow (update) Supplier can update their products if it exists.
     * @deny (update) Supplier can't update a non existing product
     * @allow (delete) Supplier can delete their products if it exists: `isExistingSupplier(supplierId)`
     * @principle Enforces document ownership for product management by suppliers.
     */
    match /suppliers/{supplierId}/products/{productId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      // Check that the product exists
      function isExistingSupplier(supplierId) {
        return isSupplier(supplierId) && exists(resource);
      }

      function isSupplier(supplierId) {
          return request.auth.uid == supplierId;
      }

      // Read rules
      allow get: if true;
      allow list: if true;

      // Write rules
      allow create: if isSignedIn();
      allow update: if isSupplier(supplierId) && exists(resource);
      allow delete: if isSupplier(supplierId) && exists(resource);
    }

    /**
     * @description Grants access to order documents only to the owner.
     * @path /userProfiles/{userId}/orders/{orderId}
     * @allow (get) User can read their own order: `request.auth.uid == userId`
     * @deny (get) User 'anotherUser' cannot read user 'QsgOPcJ9O2gI8OiJglzte8dbouh2' order: `request.auth.uid != 'QsgOPcJ9O2gI8OiJglzte8dbouh2'`
     * @allow (create) User can create orders under their profile.
     * @allow (update) User can update their orders if it exists.
     * @deny (update) User can't update a non existing order
     * @allow (delete) User can delete their orders if it exists: `isExistingOwner(userId)`
     * @principle Enforces document ownership and relational integrity for orders.
     */
    match /userProfiles/{userId}/orders/{orderId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to order item documents only to the order owner.
     * @path /userProfiles/{userId}/orders/{orderId}/orderItems/{orderItemId}
     *  @allow (get) User can read their own orderItem: `request.auth.uid == userId`
     * @deny (get) User 'anotherUser' cannot read user 'QsgOPcJ9O2gI8OiJglzte8dbouh2' orderItem: `request.auth.uid != 'QsgOPcJ9O2gI8OiJglzte8dbouh2'`
     * @allow (create) User can create orderItems under their order.
     * @allow (update) User can update their orderItems if it exists.
     * @deny (update) User can't update a non existing orderItem
     * @allow (delete) User can delete their orderItems if it exists: `isExistingOrder(orderId)`
     * @principle Enforces document ownership and relational integrity for order items.
     */
    match /userProfiles/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOrder(orderId) {
        return isSignedIn() && exists(resource);
      }

      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && exists(resource);
      allow delete: if isOwner(userId) && exists(resource);
    }
  }
}