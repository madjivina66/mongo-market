/**
 * @fileoverview Firestore Security Rules for MongoMarket.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for user-specific data (profiles, orders, order items) and a public-read, owner-write model for products. Supplier data is restricted to the supplier.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /suppliers/{supplierId}: Supplier profiles, accessible only by the supplier.
 * - /products/{productId}: Product information, publicly readable, writable only with valid ownership.
 * - /users/{userId}/orders/{orderId}: Orders, owned by users and accessible only by them.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items, owned by orders and accessible only by the owning user.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Suppliers can only access their own data.
 * - Products are publicly readable, but writes are restricted to owners (identified by a supplierId field).
 * - Listing of user documents is allowed only to the owner.
 *
 * Denormalization for Authorization:
 * - Products have a `supplierId` field for easy ownership checks without needing to `get()` the supplier document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows suppliers to manage their own profiles.
     * @path /suppliers/{supplierId}
     * @allow (create) Supplier with ID 'supplier123' can create their profile.
     * @allow (get) Supplier with ID 'supplier123' can read their profile.
     * @allow (update) Supplier with ID 'supplier123' can update their profile.
     * @allow (delete) Supplier with ID 'supplier123' can delete their profile.
     * @deny (create) Supplier with ID 'supplier456' cannot create a profile with ID 'supplier123'.
     * @principle Enforces document ownership for writes.
     */
    match /suppliers/{supplierId} {
      function isOwner(supplierId) {
        return request.auth != null && request.auth.uid == supplierId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(supplierId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == supplierId;
      allow update: if isOwner(supplierId);
      allow delete: if isOwner(supplierId);
    }

    /**
     * @description Allows public read access to products, but restricts create/update/delete to authorized users, validating supplierId.
     * @path /products/{productId}
     * @allow (get) Any user can read any product.
     * @allow (list) Any user can list products.
     * @allow (create) User with ID 'supplier123' can create a product with supplierId 'supplier123'.
     * @allow (update) User with ID 'supplier123' can update a product with supplierId 'supplier123'.
     * @allow (delete) User with ID 'supplier123' can delete a product with supplierId 'supplier123'.
     * @deny (create) User with ID 'supplier456' cannot create a product with supplierId 'supplier123'.
     * @principle Enforces public read access with owner-only writes based on the supplierId.
     */
    match /products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.supplierId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.supplierId == resource.data.supplierId && request.auth.uid == resource.data.supplierId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.supplierId;
    }

    /**
     * @description Allows users to manage their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with ID 'user123' can create an order.
     * @allow (get) User with ID 'user123' can read their order.
     * @allow (list) User with ID 'user123' can list their orders.
     * @allow (update) User with ID 'user123' can update their order.
     * @allow (delete) User with ID 'user123' can delete their order.
     * @deny (create) User with ID 'user456' cannot create an order for user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows users to manage their own order items within their orders.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) User with ID 'user123' can create an order item within their order.
     * @allow (get) User with ID 'user123' can read their order item.
     * @allow (list) User with ID 'user123' can list order items within their order.
     * @allow (update) User with ID 'user123' can update their order item.
     * @allow (delete) User with ID 'user123' can delete their order item.
     * @deny (create) User with ID 'user456' cannot create an order item for user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Prevents access to the `liveSessions` collection, which is not defined in the data model.
     * @path /liveSessions/{document}/{messages}
     * @deny (get) No one can get documents in the liveSessions collection.
     * @deny (list) No one can list documents in the liveSessions collection.
     * @deny (create) No one can create documents in the liveSessions collection.
     * @deny (update) No one can update documents in the liveSessions collection.
     * @deny (delete) No one can delete documents in the liveSessions collection.
     * @principle Prevents access to undefined collections.
     */
    match /liveSessions/{document}/{messages} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}