/**
 * @fileoverview Firestore Security Rules for MongoMarket.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user and supplier ownership model. Users can only
 * access their own profiles and orders, and suppliers can only manage their own products.
 *
 * Data Structure:
 * - /suppliers/{supplierId}: Stores supplier profiles.
 * - /suppliers/{supplierId}/products/{productId}: Stores products listed by suppliers.
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/orders/{orderId}: Stores orders placed by users.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Stores items within an order.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations are protected by authorization checks.
 *
 * Denormalization for Authorization:
 *  - The data model inherently uses path-based authorization, with nested collections reflecting ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows suppliers to manage their own profiles.
     * @path /suppliers/{supplierId}
     * @allow (get, list) User with matching {supplierId} can read the supplier profile.
     * @allow (create, update, delete) User with matching {supplierId} can manage the supplier profile.
     * @deny (get, list) User without matching {supplierId} cannot read the supplier profile.
     * @deny (create, update, delete) User without matching {supplierId} cannot manage the supplier profile.
     * @principle Enforces document ownership for writes.
     */
    match /suppliers/{supplierId} {
      function isOwner(supplierId) {
        return request.auth != null && request.auth.uid == supplierId;
      }
      function isExistingOwner(supplierId) {
        return isOwner(supplierId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isOwner(supplierId);
      allow update: if isExistingOwner(supplierId);
      allow delete: if isExistingOwner(supplierId);
    }

    /**
     * @description Allows suppliers to manage their own products.
     * @path /suppliers/{supplierId}/products/{productId}
     * @allow (get, list) User with matching {supplierId} can read the product.
     * @allow (create, update, delete) User with matching {supplierId} can manage the product.
     * @deny (get, list) User without matching {supplierId} cannot read the product.
     * @deny (create, update, delete) User without matching {supplierId} cannot manage the product.
     * @principle Enforces document ownership for writes.
     */
    match /suppliers/{supplierId}/products/{productId} {
      function isOwner(supplierId) {
        return request.auth != null && request.auth.uid == supplierId;
      }
       function isExistingOwner(supplierId) {
        return isOwner(supplierId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isOwner(supplierId);
      allow update: if isExistingOwner(supplierId);
      allow delete: if isExistingOwner(supplierId);
    }

    /**
     * @description Allows users to manage their own profiles.
     * @path /users/{userId}
     * @allow (get) User with matching {userId} can read the user profile.
     * @allow (create) User with matching {userId} can create the user profile.
     * @allow (update) User with matching {userId} can update the user profile.
     * @allow (delete) User with matching {userId} can delete the user profile.
     * @deny (get) User without matching {userId} cannot read the user profile.
     * @deny (create) User without matching {userId} cannot create the user profile.
     * @deny (update) User without matching {userId} cannot update the user profile.
     * @deny (delete) User without matching {userId} cannot delete the user profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list) User with matching {userId} can read/list their orders.
     * @allow (create, update, delete) User with matching {userId} can manage their orders.
     * @deny (get, list) User without matching {userId} cannot read/list the orders.
     * @deny (create, update, delete) User without matching {userId} cannot manage the orders.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list) User with matching {userId} can read/list their order items.
     * @allow (create, update, delete) User with matching {userId} can manage their order items.
     * @deny (get, list) User without matching {userId} cannot read/list the order items.
     * @deny (create, update, delete) User without matching {userId} cannot manage the order items.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}