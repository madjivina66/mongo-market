
{
  "entities": {
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product listed on MongoMarket.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Product entity."
        },
        "supplierId": {
          "type": "string",
          "description": "Reference to Supplier. (Relationship: Supplier 1:N Product)"
        },
        "name": {
          "type": "string",
          "description": "The name of the product."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product image.",
          "format": "uri"
        },
        "price": {
          "type": "number",
          "description": "The price of the product."
        },
        "category": {
          "type": "string",
          "description": "The category the product belongs to."
        }
      },
      "required": [
        "id",
        "supplierId",
        "name",
        "description",
        "imageUrl",
        "price",
        "category"
      ]
    },
    "Supplier": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Supplier",
      "type": "object",
      "description": "Represents a supplier listing products on MongoMarket.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Supplier entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the supplier."
        },
        "contactEmail": {
          "type": "string",
          "description": "The contact email address of the supplier.",
          "format": "email"
        },
        "contactPhone": {
          "type": "string",
          "description": "The contact phone number of the supplier."
        },
        "address": {
          "type": "string",
          "description": "The physical address of the supplier."
        }
      },
      "required": [
        "id",
        "name",
        "contactEmail",
        "contactPhone",
        "address"
      ]
    },
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user's profile in the MongoMarket application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "name": {
          "type": "string",
          "description": "The user's full name."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "phone": {
            "type": "string",
            "description": "The user's phone number."
        },
        "address": {
          "type": "object",
          "properties": {
              "street": {"type": "string"},
              "city": {"type": "string"},
              "state": {"type": "string"},
              "zip": {"type": "string"},
              "country": {"type": "string"}
          }
        },
        "paymentMethods": {
          "type": "array",
          "description": "Payment methods associated with a user",
          "items": {
            "type": "string"
          }
        },
        "isPro": {
            "type": "boolean",
            "description": "Indicates if the user has a Pro subscription."
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Order entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Order)"
        },
        "orderDate": {
          "type": "string",
          "description": "The date and time the order was placed.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "The total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "The current status of the order (e.g., pending, processing, shipped, delivered)."
        },
        "orderItems": {
          "type": "array",
          "description": "List of items in this order",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "orderDate",
        "totalAmount",
        "status"
      ]
    },
    "OrderItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OrderItem",
      "type": "object",
      "description": "Represents an item within an order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the OrderItem entity."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:N OrderItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N OrderItem)"
        },
        "quantity": {
          "type": "number",
          "description": "The quantity of the product in the order item."
        },
        "price": {
          "type": "number",
          "description": "The price of the order item"
        }
      },
      "required": [
        "id",
        "orderId",
        "productId",
        "quantity",
        "price"
      ]
    },
    "ChatMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatMessage",
      "type": "object",
      "description": "Represents a chat message in a live session.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ChatMessage entity."
        },
        "senderId": {
          "type": "string",
          "description": "The ID of the user who sent the message."
        },
        "senderName": {
          "type": "string",
          "description": "The display name of the sender."
        },
        "text": {
          "type": "string",
          "description": "The content of the chat message."
        },
        "timestamp": {
          "type": "string",
          "description": "The server-side timestamp of when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "senderId",
        "senderName",
        "text",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/userProfiles/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profiles. Access is restricted to the user themselves.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/suppliers/{supplierId}",
        "definition": {
          "entityName": "Supplier",
          "schema": {
            "$ref": "#/backend/entities/Supplier"
          },
          "description": "Stores supplier profiles. Access is restricted to the supplier.",
          "params": [
            {
              "name": "supplierId",
              "description": "The unique identifier for the supplier."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information. Open to the public for listing, but create/update restricted to authorized users or roles.",
          "params": [
            {
              "name": "productId",
              "description": "The unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/userProfiles/{userId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores order information. Orders are owned by users.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            }
          ]
        }
      },
      {
        "path": "/userProfiles/{userId}/orders/{orderId}/orderItems/{orderItemId}",
        "definition": {
          "entityName": "OrderItem",
          "schema": {
            "$ref": "#/backend/entities/OrderItem"
          },
          "description": "Stores order items. Order items are owned by orders.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            },
            {
              "name": "orderItemId",
              "description": "The unique identifier for the order item."
            }
          ]
        }
      },
      {
        "path": "/liveSessions/{sessionId}/messages/{messageId}",
        "definition": {
          "entityName": "ChatMessage",
          "schema": {
            "$ref": "#/backend/entities/ChatMessage"
          },
          "description": "Stores chat messages for a specific live session. Publicly readable but only authenticated users can write.",
          "params": [
            {
              "name": "sessionId",
              "description": "The unique identifier for the live session."
            },
            {
              "name": "messageId",
              "description": "The unique identifier for the chat message."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the MongoMarket application, emphasizing security, scalability, and ease of management. It follows a hierarchical structure for user-owned data and utilizes denormalization for authorization independence.  \n\n*   **UserProfiles:** User profiles are stored under `/userProfiles/{userId}`, ensuring that each user's data is isolated and access is restricted to the user themselves. Orders are stored as a subcollection of UserProfiles.\n*   **Products:** Products are stored under `/products/{productId}`.  Products have a `supplierId` field which is used to display products from specific suppliers.\n*   **Suppliers:** Supplier profiles are stored under `/suppliers/{supplierId}`, with access limited to the supplier and potentially admins.\n*   **Orders:** Orders are stored as a subcollection of user profiles under `/userProfiles/{userId}/orders/{orderId}`. This establishes clear ownership and simplifies security rules. Each order has an `orderItems` field.\n*   **OrderItems:** OrderItems are stored as a subcollection of orders under `/userProfiles/{userId}/orders/{orderId}/orderItems/{orderItemId}`. This establishes clear ownership and simplifies security rules. Each `orderItem` has a `productId` field.  This supports the QAP of allowing users to list all orders.\n\n**Authorization Independence:**\nAuthorization independence is achieved by avoiding the use of `get()` calls in security rules. This is accomplished by structuring data to enable path-based authorization. This means access control is determined by the document's location in the database hierarchy, rather than relying on data from other documents. For example, orders are stored as subcollections of users, allowing the system to enforce that only the user can access their own orders based on the path `/userProfiles/{userId}/orders/{orderId}`.\n\n**QAPs (Rules are not Filters):**\nThe structure is designed to support secure list operations (QAPs). Because ownership is based on path structure, listing user orders is very efficient and secure.\n\n**Denormalization**: There is not much denormalization in this example.  It might be useful to denormalize some data such as the supplier name in the `products` collection.  In such a case you would simply add a `supplierName` field to the `Product` entity."
  }
}

    